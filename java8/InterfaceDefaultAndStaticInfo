package com.huawei.java8;

/**
 * 五、接口中的默认方法与静态方法
 * 
 *	  传统上，Java中实现接口的类必须为接口中定义的每个方法提供一个实现类，或者从父类中继承它的实现。
 *  但如果类库的设计者需要修改接口，加入新的方法，这种方式就会出现问题。所有使用该接口的实体类为了
 *  适配新的接口约定都需要进行修改（要是这么不兼容的话，迟早被淘汰）。所以，Java8为了解决这一问题
 *  引入了一种新的机制。Java8中的接口支持在声明方法的同时提供实现。其一，Java8允许在接口中声明静态方法。
 *  其二，Java8引入的新功能——默认方法，通过默认方法可以指定接口方法的默认实现（因此，实现接口的类
 *  如果不显式的提供该方法的具体实现，就会自动继承默认的实现，这种机制可以使你平滑的进行接口的优化和升级）。
 * 
 * 默认方法
 * 
 * Java8中允许接口中包含具有具体实现的方法，该方法称为"默认方法"，默认方法使用default关键字修饰
 * 
 * 默认方法的"类优先"原则
 * 
 * 若一个接口中定义了一个默认方法，而另外一个父类或接口中定义了一个同名方法时
 * 
 * 	1.选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。
 * 	2.接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法
 * 	  (不管方法是否是默认方法)，那么必须覆盖该方法来解决冲突
 * 
 * 
 * */
public class InterfaceDefaultAndStaticInfo {
	
}

interface MyFunc<T> {
    default String getName() {
        return "hello java8";
    }
}

interface MyFunc1 {
    default String getName() {
        return "hello Java情报局";
    }
}

class MyClass implements MyFunc, MyFunc1 {

    @Override
    public String getName() {
        return MyFunc1.super.getName();
    }
}
