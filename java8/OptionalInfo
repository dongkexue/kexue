package com.huawei.java8;

import java.time.chrono.IsoChronology;
import java.util.Optional;

import org.junit.Test;
import com.huawei.java8.Person;

import ch.qos.logback.core.net.SyslogOutputStream;
/**
 * 六、Optional 类
 *	1. 用 Optional 取代 null
 * 	
 * 	当你碰到程序中有一个NullPointerException时的第一冲动是不就是赶紧找到代码，添加一个if语句，检查下？？
 * 	NullPointerException是Java程序开发中典型的异常。为了避免这种异常，我们的代码有可能充斥着一层又一层的深度嵌套的null检查，代码可读性极差。
 *  Optional类(java.util.Optional) 是一个容器类，代表一个值存在或不存在， 原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。
 * 
 * 	变量存在时，Optional类只是对类简单封装。变量不存在时，缺失的值就会被建模成一个"空"的Optional对象，
 * 	由方法Optional.empty()返回
 * 
 * 	常用方法：
 * 	1.Optional.of(T t):创建一个Optional实例
 * 	2.Optional.empty():创建一个空的Optional实例
 * 	3.Optional.ofNullable(T t):若t部位null,创建Optional实例，否则创建空实例
 * 	4.isPresent():判断是否包含值
 * 	5.orElse(T t):如果调用对象包含值，返回该值，否则返回t
 * 	6.orElseGet(Supplier s):如果调用对象包含值，返回该值，否则返回s获取的值
 *  7.map(Function f):如果有值对其处理，并返回处理后的Optional,否则返回Optional.empty()
 *  8.flatMap(Function f):与map类似，要求返回值必须是optional
 * 
 * */
public class OptionalInfo {
	
	@Test
	public void test(){
		
		//创建一个空Optional
		Optional<Person> op = Optional.empty();
		
		Optional<Person> op1 = Optional.of(new Person());
		
		Person p = op1.get();
		System.out.println(p);
		//Person{name='null', birthday=null, gender=null, emailAddress='null'}
		
		Person person = null;
		//person为null,抛出NullPointerException
		Optional<Person> op2=Optional.of(person);
		//创建允许null值的Optional对象
		Optional<Person> op3=Optional.ofNullable(person);
		
	}
	
	@Test
	public void test1(){
		Person person = new Person("Tom",IsoChronology.INSTANCE.date(1999, 7, 15),Person.Sex.FEMALE, "Tom@360.com");
		
		Optional<Person> op = Optional.ofNullable(person);
		/**
		 * 使用map从optional对象中提取和转换值
		 * 如果想提取人员姓名，之前需要判断person!=null,
		 * Optional提供了一个map方法，对其处理
		 * 
		 * */
		Optional<String> op1 = op.map(Person::getName);
		System.out.println(op1.get());
		
		//使用flatMap连接
		Optional<String> op2 = op.flatMap(p -> Optional.of(p.getName()));
		System.out.println(op2.get());
		
	}
}
