SpringCloud基础组件简介
1	注册中心Eureka(或Consul 、Zookeeper)
1.1	什么是Eureka?
Eureka是Netflix 在线影片公司开源的一个服务注册与发现的组件，和其他Netflix 公司的服务组件（例如负载均衡、熔断器、网关等） 一起，被Spring Cloud 社区整合为Spring Cloud Netflix 模块。
    和Consul 、Zookeeper 类似， Eureka 是一个用于服务注册和发现的组件， 最开始主要应用于亚马逊公司旗下的云计算服务平台AWS。Eureka 分为Eureka Server 和Eureka Client, Eureka
Server 为Eureka 服务注册中心， Eureka Client 为Eureka 客户端。
1.2	为什么选择Eureka?
    Eureka 是Spring Cloud 首选推荐的服务注册与发现组件， 与Spring Cloud 其他组件可以无缝对接。Eureka 和其他组件，比如负载均衡组件Ribbon 、熔断器组件Hystrix、熔断器监控组件Hystrix Dashboard 组件、熔断器聚合监控Turbine 组件，以及网关Zuul 组件相互配合， 能够很容易实现服务注册、负载均衡、熔断和智能路由等功能。这些组件都是由Netflix 公司开源的，一起被称为Netflix OSS 组件。Netflix OSS 组件由Spring Cloud 整合为Spring Cloud Netflix 组件，
    它是Spring Cloud 构架微服务的核心组件，也是基础组件。
1.3	Eureka 的基本架构
Eureka 的基本架构其中主要包括以下3 种角色。
1.	Register Service ：服务注册中心，它是一个Eureka Server ，提供服务注册和发现的功能。
2.	Provider Service ：服务提供者，它是一个Eureka Client ，提供服务。
3.	Consumer Service ：服务消费者，它是一个Eureka Cient ，消费服务。
服务消费的基本过程如下：首先创建一个服务注册中心Eureka Server ，服务提供者EurekaClient 向服务注册中心Eureka Server 注册，将自己的信息（比如服务名和服务的IP 地址等）提交给服务注册中心Eureka Server 。同样，服务消费者Eureka Client 也向服务注册中心Eureka Server 注册，同时服务消费者获取一份服务注册列表的信息，该列表包含了所有向服务注册中心Eureka Server 注册的服务信息。获取服务注册列表信息之后，服务消费者就知道服务提供者的IP 地址，可以通过HTTP远程调度来消费服务提供者的服务。
2	负载均衡（ribbon,Feign或Nginx）
2.1	Feign客户端负载均衡
2.1.1	Feign基本简介：
Feign 采用了声明式API 接口的风格，将Java Http 客户端绑定到它的内部。
Feign 的首要目标是将Java Http客户端调用过程变得简单。
2.1.2	重点：
1. 如何使用Feign来远程调度其他服务
2. FeignClient的各项详细配置
2.1.3	FeignClient的配置
Feign Client 默认的配置类为FeignClientsConfiguration打开这个类，可以发现这个类注入了很多Feign 相关的配置Bean 。
重写FeignClientsConfiguration 类中的Bean ， 覆盖掉默认的配置Bean ，从而达到自定义配置的目的。例如Feign 默认的配置在请求失败后， 重试次数为0 ，即不重试。现在希望在请求失败后能够重试，这时需要写一个配置FeignConfig 类，在该类中注入Retryer的Bean ，覆盖掉默认的Retryer的Bean ， 并将FeignConfig 指定为FeignClient 的配置类。
2.1.4	Feign的运行流程
Feign 是一个伪Java Http 客户端， Feign 不做任何的请求处理。Feign 通过处理注解生成Request 模板，从而简化了Http API 的开发。
   开发人员可以使用注解的方式定制Request API模板。在发送HttpRequest 请求之前， Feign 通过处理注解的方式替换掉Request 模板中的参数，生成真正的Request ，并交给Java Http 客户端去处理。利用这种方式，开发者只需要关注Feign注解模板的开发，而不用关注Http 请求本身，简化了Http 请求的过程，使得Http请求变得简单和容易理解。
   Feign 通过包扫描注入FeignClient 的Bean ，该源码在FeignClientsRegistrar 类中。首先在程序启动时，会检查是否有＠EnableFeignClients 注解，如果有该注解，则开启包扫描，扫描被＠FeignClient 注解的接口。
2.1.5	Feign如何实现负载均衡的：
FeignRibbonClientAutoConfiguration 类配置了Client 的类型（HttpURLConnection、OkHIttp 和HttpClient ），最终向容器注入的是Client 的实现类LoadBalancerFeignClient ，即负载均衡客户端。
2.1.6	Feign总结：
总的来说， Feign 的源码实现过程如下：
1. 首先通过@EnableFeignClients 注解开启Feign Client 的功能。只有这个注解存在，才会在程序启动时开启对＠FeignClient 注解的包扫描。
2. 根据Feign 的规则实现接口，井在接口上面加上＠FeignClient 注解。
    3. 程序启动后，会进行包扫描，扫描所有的＠ FeignClient 的注解的类，并将这些信息注入IoC 容器中。
    4. 当接口的方法被调用时， 通过JDK 的代理来生成具体的RequestTemplate根对象。
    5. 根据RequestTemplate 再生成Http 请求的Request 对象。
    6. Request 对象交给Client 去处理。
    7. 最后Client 被封装到LoadBalanceClient 类，这个类结合Ribbon 做到了负载均衡。
2.2	RestTmeplate与Ribbon
2.2.1	RestTemplate简介：
    RestTemplate 是Spring Resources 中一个访问第三方API 接口的网络请求框架。
    RestTemplate 的设计原则和其他Spring Template类似，都是为执行复杂任务提供了一个具有默认行为的简单方法。
    RestTemplate 是用来消费REST 服务的，所以RestTemplate 的主要方法都与REST协议的一些方法紧密相连，例如HEAD 、GET 、POST 、PUT 、DELETE 和OPTIONS 等方法。
    RestTemplate 支持常见的Http 协议的请求方法，例如Post 、Put 、Delete 等，所以用RestTemplate 很容易构建RESTful API。
    RestTemplate 的使用很简单，它支持Xml 、JSON数据格式，默认实现了序列化，可以自动将JOSN 字符串转换为实体。
2.2.2	Ribbon简介：
    负载均衡是指将负载分摊到多个执行单元上，常见的负载均衡有两种方式。一种是独立进程单元，通过负载均衡策略，将请求转发到不同的执行单元上，例如Ngnix 。另一种是将负载均衡逻辑以代码的形式封装到服务消费者的客户端上，服务消费者客户端维护了一份服务提供者的信息列表，有了信息列表，通过负载均衡策略将请求分摊给多个服务提供者，从而达到负载均衡的目的。
    Ribbon 是Netflix 公司开源的一个负载均衡的组件，它属于上述的第二种方式，是将负载均衡逻辑封装在客户端中，并且运行在客户端的进程里。Ribbon 是一个经过了云端测试的IPC库，司以很好地控制HTTP 和TCP 客户端的负载均衡行为。
    在Spring Cloud 构建的微服务系统中， Ribbon 作为服务消费者的负载均衡器，有两种使用方式， 一种是和RestTemplate 相结合，另一种是和Feign 相结合。Feign 已经默认集成了Ribbon。
2.2.3	为什么在RestTemplate类的Bean上加一个@LoadBalance 注解
    Ribbon 的负载均衡主要是通过LoadBalancerClient 来实现的，而LoadBalancerClient具体交给了ILoadBalancer 来处理， ILoadBalancer 通过配置向EurekaClient获取注册列表的信息，默认每10 秒向EurekaClient 发送一次“ping ”， 进而检查是否需要更新服务的注册列表信息。最后，在得到服务注册列表信息后， ILoadBalancer 根据IRule 的策略进行负载均衡。
而RestTemplate 加上＠LoadBalance 注解后，在远程调度时能够负载均衡， 主要是维护了一个被＠LoadBalance 注解的RestTemplate 列表，并给该列表中的RestTemplate 对象添加了拦截器。在拦截器的方法中，将远程调度方法交给了Ribbon 的负载均衡器LoadBalancerClient去处理，从而达到了负载均衡的目的。
3	熔断器Hystrix
3.1	什么是Hystrix
在分布式系统中，服务与服务之间的依赖错综复杂， 一种不可避免的情况就是某些服务会出现故障，导致依赖于它们的其他服务出现远程调度的线程阻塞。Hystrix 是Netflix 公司开源的项目，它提供了熔断器功能，能够阻止分布式系统中出现联动故障Hystrix 是通过隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高了整个分布式系统的弹性。
3.2	Hystrix解决了什么问题
在复杂的分布式系统中，可能有几十个服务相互依赖，这些服务由于某些原因，例如机房的不可靠性、网络服务商的不可靠性等，导致某个服务不可用。如果系统不隔离该不可用的服务，可能会导致整个系统不可用。
例如，对于依赖30 个服务的应用程序，每个服务的正常运行时间为99.99% ，对于单个服务来说， 99.99% 的可用是非常完美的。有99.9930 = 99.7% 的可正常运行时间和0.3% 的不可用时间，那么10 亿次请求中有3000000次失败，实际的情况可能比这更糟糕。如果不设计整个系统的韧性，即使所有依赖关系表现良好，单个服务只有0.01% 的不可用，由于整个系统的服务相互依赖，最终对整个系统的影响是非常大的。在微服务系统中， 一个用户请求可能需要调用几个服务才能完成。当某一个服务出现网络延迟或者故障时，即使其它依赖该服务的服务可用，由于当前服务的不可用，使整个用户请求处于阻塞状态，并等待该服务的响应。在高并发的情况下，单个服务的延迟会导致整个请求都处于延迟状态，可能在几秒钟就使整个服务处于线程负载饱和的状态。
某个服务的单个点的请求故障会导致用户的请求处于阻塞状态，最终的结果就是整个服务的线程资源消耗殆尽。由于服务的依赖性，会导致依赖于该故障服务的其他服务也处于线程阻塞状态，最终导致这些服务的线程资源消耗殆尽， 直到不可用，从而导致整个问服务系统都不可用，即雪崩效应。 为了防止雪崩效应，因而产生了熔断器模型。Hystrix 是在业界表现非常好的一个熔断器模型实现的开源组件，它是Spring Cloud 组件不可缺少的一部分。
3.3	Hystrix的设计原则
总的来说， Hystrix 的设计原则如下。
    1. 防止单个服务的故障耗尽整个服务的Servlet 容器（例如Tomcat ）的线程资源。
    2. 快速失败机制，如果某个服务出现了故障，则调用该服务的请求快速失败，而不是线程等待。
    3. 提供回退（ fallback ）方案，在请求发生故障时，提供设定好的回退方案。
    4. 使用熔断机制，防止故障扩散到其他服务。
5. 提供熔断器的监控组件Hystrix Dashboard，可以实时监控熔断器的状态。
3.4	Hystrix的工作机制
首先，当服务的某个API 接口的失败次数在一定时间内小于设定的阀值时，熔断器处于关闭状态，该API 接口正常提供服务。当该API 接口处理请求的失败次数大于设定的阀值时，Hystrix 判定该API 接口出现了故障，打开熔断器，这时请求该API 接口会执行快速失败的逻辑（即fallback 回退的逻辑），不执行业务逻辑，请求的线程不会处于阻塞状态。
处于打开状态的熔断器， 一段时间后会处于半打开状态，并将一定数量的请求执行正常逻辑。剩余的请求会执行快速失败，若执行正常逻辑的请求失败了，则熔断器继续打开；若成功了，则将熔断器关闭。这样熔断器就具有了自我修复的能力。
4	网关（Zuul）
4.1	为什么需要智能路由网关组件Zuul
Zuul 作为路由网关组件，在微服务架构中有着非常重要的作用，主要体现在以下6 个方面。
1. Zuul、Ribbon以及Eureka相结合，可以实现智能路由和负载均衡的功能，Zuul能够将请求流量按照某种策略分发到集群状态的多个服务实例。
2. 网关将所有服务的API接口统一聚合，并统一对外暴露。外界系统调用API接口时，都是由网关对外暴露的API接口，外界系统不需要知道微服务系统中各服务相互调用的复杂性。微服务系统也保护了其内部微服务单元的API 接口， 防止其被外界直接调用，导致服务的敏感信息对外暴露。
3. 网关服务可以做用户身份认证和权限认证，防止非法请求操作API 接口，对服务器起到保护作用。
4. 网关可以实现监控功能，实时日志输出，对请求进行记录。
5. 网关可以用来实现流量监控， 在高流量的情况下，对服务进行降级。
6. API 接口从内部服务分离出来， 方便做测试。
4.2	Zuul的工作原理
Zuul 是通过Servlet 来实现的， Zuul 通过自定义的Zuu!Servlet （类似于Spring MVC 的DispatcServlet）来对请求进行控制。Zuul的核心是一系列过滤器，可以在Http请求的发起和响应返回期间执行一系列的过滤器。Zuul包括以下四种过滤器。
1.PRE 过滤器：它是在请求路由到具体的服务之前执行的，这种类型的过滤器可以做安全验证，例如身份验证、参数验证等。
2.ROUTING 过滤器：它用于将请求路由到具体的微服务实例。在默认情况下，它使用Http Client进行网络请求。
    3. POST 过滤器：它是在请求己被路由到微服务后执行的。一般情况下，用作收集统计信息、指标，以及将响应传输到客户端。
4. ERROR 过滤器：它是在其他过滤器发生错误时执行的。
Zuul 采取了动态读取、编译和运行这些过滤器。过滤器之间不能直接相互通信，而是通过RequestContext对象来共享数据， 每个请求都会创建一个RequestContext 对象。Zuul 过滤器具有以下关键特性。
    1. Type（类型）：Zuul 过滤器的类型，这个类型决定了过滤器在请求的哪个阶段起作用，例如Pre 、Post 阶段等。
    2. Execution Order（执行顺序）：规定了过滤器的执行顺序， Order 的值越小，越先执行。
    3. Criteria（标准）： Filter 执行所需的条件。
    4. Action（行动）： 如果符合执行条件，则执行Action （即逻辑代码）。
    当一个客户端Request 请求进入Zuul 网关服务时，网关先进入“pre filter”进行一系列的验证、操作或者判断。然后交给“routing filter ”进行路由转发，转发到具体的服务实例进行逻辑处理、返回数据。当具体的服务处理完后，最后由“post filter”进行处理， 该类型的处理器处理完之后，将Response 信息返回给客户端。
ZuulServlet 是Zuul 的核心Servlet。ZuulServlet 的作用是初始化ZuulFilter ， 并编排这些ZuulFilter 的执行顺序。
5	配置中心（Config）
5.1	配置中心概述
如果微服务架构中没有使用统一配置中心时，所存在的问题：
1.	配置文件分散在各个项目里，不方便维护
2.	配置内容安全与权限，实际开发中，开发人员是不知道线上环境的配置的
3.	更新配置后，项目需要重启
在SpringCloud中我们使用config组件来作为统一配置中心
5.2	实现方式
1.	从本地读取配置文件
2.	从Git上面读取配置文件
6	注册中心(consul)
6.1	Consul 的特点和功能
1.	服务发现：Consul客户端可以向Consul注册服务，例如API服务或者Mysql服务，其他客户端可以使用Consul来发现服务的提供者。Consul支持使用DNS或HTTP来注册和发现服务。
2.	运行时健康检查：Consul客户端可以提供任意数量的运行状况检查机制，这些检查机制可以与给定服务（Web服务器返回200 OK）或本地节点（内存利用率低于90%）相关联。这些信息可以用来监控集群的运行状态，服务发现组件可以使用监控信息来路由流量，使流量远离不健康的服务。
3.	KV存储：应用程序可以将Consul的键/值存储起来用于任何需求，包括动态配置、功能标记、协调、领导者选举等。KV存储采用HTTP API，所以很方便使用。
4.	安全服务通信：Consul可以为服务生成和分发TLS证书，以建立相互的TLS链接
5.	多数据中心：Consul支持多个数据中心，这意味着Consul用户不必担心构建额外的抽象层来扩展到多个区域。
6.2	Consul的原理
每个提供服务的节点都运行了Consul的代理（Agent）,运行代理时不需要服务发现和获取配置的KV键值对，代理只负责监控检查。代理节点可以和一个或多个Consul服务端通信。Consul服务端时存储和复制数据的节点，采用RAFT算法保证了数据一致性，并选出了领导者，建议使用3或5台Consul服务端，以避免发生数据丢失的情况。Consul支持多个数据中心，建议每个数据中心使用多个Consul Server作为一个集群。
如果微服务组件需要发现服务，可以查询任何数据中心的Consul服务端或Consul客户端，Consul客户端会自动将查询转发给Consul服务端。
需要发现其他服务或节点的基础架构组件可以查询任何Consul服务端或任何Consul代理。如果是查询Consul Agent,Consul Agent会自动将查询请求转发给Consul服务端。发生跨数据中心服务发现或配置请求时，本地Consul服务端会将请求转发到远程数据中心，并返回结果。
6.3	Consul服务注册发现流程
1.	服务提供者（provider）在启动时，会向Consul发送一个请求，将其Host、IP、应用名、健康检查等元数据信息发送给Consul。
2.	Consul接受到服务提供者的注册后，定期想起发送健康检查的请求，检验服务提供者是否健康。
3.	服务消费者（consumer）会从注册中心Consul中获取服务注册列表，当服务消费者消费服务时，会根据服务名从服务注册列表中获取具体服务的实例（一个或者多个）信息，再根据负载均衡策略完成服务的调用。
7	服务网关（Gateway）
7.1	服务网关介绍
  服务网关（Spring Cloud Gateway）是Spring Cloud官方推出的第二代网关框架，用于替代第一代网关Netflix Zuul,不仅提供统一的路由方式，并且基于Filter链的方式提供了网关的基本功能。服务网关作为整个分布式系统的流量入口，有着举足轻重的作用：
1.	协议转换，路由转发。
2.	流量聚合，对流量进行监控，日志输出。
3.	作为整个系统的前站，对流量进行控制，有限流的作用。
4.	作为系统的前端边界，外部流量只能通过网关才能访问系统。
5.	可以在网关层做权限校验。
6.	可以在网关层做缓存。
7.2	服务网关的实现原理
Zuul有两大核心组件，分别为路由（Router）和过滤器（Filter）。和Zuul一样，服务网关的核心组件也有路由和过滤器，除此之外还多了一个断言（Predicate）,用来判断请求到底交给哪个Gateway Web Handler处理。当客户端向服务网关发出请求时，首先将请求交给Gateway Handler Mapping处理，如果请求与路由匹配（这时就用到了断言），则将其发送到相应的Gateway Web Handler处理。Gateway Web Handler处理请求会经过一系列的过滤器链。先执行PRE过滤器逻辑，然后进行代理请求。在发出代理请求且收到代理服务的响应后，执行POST过滤器逻辑。在执行所有的PRE过滤器逻辑时，一般可以实现鉴权、限流、日志输出、更改请求头和转换协议等功能。在收到响应之后，会执行所有POST过滤器的逻辑，这里可以对响应数据进行修改，比如更改响应头和转换协议等。
在上述处理过程中，有一个重要的点就是将请求和路由进行匹配，这时需要用到断言来决定请求应该走哪一个路由。
7.3	断言工厂
断言（Predicate）来自于Java8的接口。该接口接受一个输入参数，返回一个布尔值结果，包含多种默认方法将断言组合成其他复杂的逻辑（比如：与、或、非）。
当一个请求到来时，需要首先将其交给断言工厂去处理。根据配置的断言规则进行，如果匹配成功，则进行下一步处理；如果没有匹配成功，则返回错误信息。服务网关内置了许多断言工厂（Predicate Factory），能够满足大部分的业务场景。同时用户也可以自己实现断言工厂。
	常用的断言工厂如下：
1.	After路由断言工厂：可配置一个时间只有请求的时间在配置时间之后，才交给路由去处理；否则报错，不通过路由。与时间相关的断言工厂还有Before路由断言工厂以及Between路由断言工厂。
2.	Header路由断言工厂：需要两个参数，分别是Header的键及Header的值。其中Header的值可以是一个正则表达式。当次请求头匹配了断言的Header的键和值时，断言通过，进入路由逻辑当中；否则，返回错误信息。
3.	Cookie路由断言工厂：需要两个参数，分别为Cookie名和Cookie值。Cookie值可以为正则表达式。当请求头带有Cookie，并且请求的Cookie和断言的Cookie相匹配时，请求能够被正确路由，否则报404错误信息。
4.	Host路由断言工厂：需要一个参数—Hostname，可以使用.*等去匹配Host。这个参数会匹配请求头中的Host的值，如果匹配成功，则请求正确转发，否则，报404错误信息。
5.	Method路由断言工厂：又称作方法路由断言工厂，只允许配置请求类型的请求路由通过。该路由断言工厂需要一个参数，即请求类型，如：GET、POST、PUT和DELETE等。
6.	Path路由断言工厂：即路径路由断言工厂。该断言工厂需要配置一个参数—应用匹配路径，可以是一个spel表达式。
7.	Query路由断言工厂：即请求参数断言工厂，当请求携带的参数和配置的参数匹配时，路由被正确转发；否则，报404错误信息。该断言工厂需要配置2个参数，分别为参数名和参数值，其中参数值可以是正则表达式，也可以只配置1个参数，即只配置参数名。
7.4	过滤器
断言决定了请求由哪个路由处理，在处理之前需要经过PRE类型的过滤器处理，处理返回响应后，可以由POST类型的过滤器处理。-
